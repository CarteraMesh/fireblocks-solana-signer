# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following jobs:
# - required: runs the test suite on ubuntu with stable and beta rust toolchains
# - minimal: runs the test suite with the minimal versions of the dependencies that satisfy the
#   requirements of this crate, and its dependencies
# - os-check: runs the test suite on mac and windows
# - coverage: runs the test suite and collects coverage information
# See check.yml for information about how the concurrency cancellation and workflow triggering works
permissions:
  contents: read
env:
  RPC_URL: ${{ secrets.RPC_URL }}
  FIREBLOCKS_API_KEY: ${{ secrets.FIREBLOCKS_API_KEY }}
  FIREBLOCKS_SECRET: ${{ secrets.FIREBLOCKS_SECRET }}
  RUST_LOG: "fireblocks_solana_signer=debug"
  FIREBLOCKS_ENDPOINT: https://sandbox-api.fireblocks.io
  FIREBLOCKS_POLL_TIMEOUT: "15"
  FIREBLOCKS_POLL_INTERVAL: "3"
  FIREBLOCKS_DEVNET: "true"
  FIREBLOCKS_VAULT: "0"
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: test
jobs:
  os-check:
    # run cargo test on mac and windows
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / stable
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
    steps:
      # if your project needs OpenSSL, uncomment this to fix Windows builds.
      # it's commented out by default as the install command takes 5-10m.
      # - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
      #   if: runner.os == 'Windows'
      # - run: vcpkg install openssl:x64-windows-static-md
      #   if: runner.os == 'Windows'
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo build
        run: cargo build --locked --all-targets
  coverage:
    runs-on: ${{ vars.RUNNER }}
    name: ubuntu / stable / coverage / ${{ matrix.features }}
    strategy:
      fail-fast: false
      matrix:
        features:
          - "gpg"
    steps:
      - uses: actions/checkout@v4
      - uses: ubicloud/rust-cache@v2
        with:
          cache-on-failure: "true"
          cache-all-crates: "true"
          workspaces: |
            . -> target
          # Specifies what to use as the backend providing cache
          # Can be set to "github", "buildjet", or "warpbuild"
          # default: "github"
      - uses: CarteraMesh/fireblocks-config-action@v1
        with:
          fireblocks-secret: |
            ${{ secrets.FIREBLOCKS_SECRET }}
          fireblocks-api-key: ${{ secrets.FIREBLOCKS_API_KEY }}
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: gpg
        run: |
          sudo apt-get update -y && sudo apt-get install -y libgpgme-dev
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov (${{ matrix.features }})
        run: |
          if [ "${{ matrix.features }}" == "default" ]; then
            cargo llvm-cov --locked --lcov --output-path lcov-${{ matrix.features }}.info
          else
            cargo llvm-cov --locked --features "${{ matrix.features }}" --lcov --output-path lcov-${{ matrix.features }}.info
          fi
      - name: Record Rust version
        run: echo "RUST=$(rustc --version)" >> "$GITHUB_ENV"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov-${{ matrix.features }}.info
          flags: ${{ matrix.features }}
          env_vars: OS,RUST
